plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'work.art1st'
version = '2.0.7-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://maven.elytrium.net/repo/" }
    maven { url "https://repo.codemc.io/repository/maven-public/" }
    maven { url "https://repo.papermc.io/repository/maven-public/" }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-proxy:3.4.0-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'
    annotationProcessor 'com.velocitypowered:velocity-api:3.4.0-SNAPSHOT'

    compileOnly 'net.md-5:bungeecord-proxy:1.20-R0.1-SNAPSHOT'

    implementation 'com.electronwill.night-config:core:3.6.6'
    implementation 'com.electronwill.night-config:toml:3.6.6'
    compileOnly 'io.netty:netty-all:4.1.92.Final'
    compileOnly 'com.spotify:completable-futures:0.3.5'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.6'

    compileOnly 'com.google.code.gson:gson:2.8.9'
    implementation "net.kyori:adventure-api:4.14.0"
    implementation "net.kyori:adventure-platform-bungeecord:4.3.0"

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
